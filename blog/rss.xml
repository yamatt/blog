<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Bigger Picture Blog on Matt Copperwaite</title><link>https://matt.copperwaite.net/blog/</link><description>Recent content in The Bigger Picture Blog on Matt Copperwaite</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><managingEditor>matt@copperwaite.net (Matt Copperwaite)</managingEditor><webMaster>matt@copperwaite.net (Matt Copperwaite)</webMaster><copyright>CC BY-SA 4.0</copyright><atom:link href="https://matt.copperwaite.net/blog/rss.xml" rel="self" type="application/rss+xml"/><item><title>Running Effective One-to-Ones</title><link>https://matt.copperwaite.net/blog/running-good-one-to-ones/</link><pubDate>Mon, 14 Jun 2021 18:10:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/blog/running-good-one-to-ones/</guid><description>&lt;p>I&amp;rsquo;ve run one-to-ones for a couple years now I realised I didn&amp;rsquo;t have a good plan for how to run them effectively, and weirdly there didn&amp;rsquo;t seem to be a lot of discussion written up about them that I could find online.&lt;/p>
&lt;p>I spoke with some colleagues who pointed to the &lt;a href="https://www.manager-tools.com/manager-tools-basics">Manager Tools Basics podcast&lt;/a> which has a set of episodes totalling around 90 minutes on the subject at hand. They are however seemingly recorded in 2005 which makes them over 15 years old. This lines up with the banner at the of the webpage. While this does seem old and despite pandemics and changes in technology it seems to hold up for the most part. The issue though is that for one, they are very verbose and second, the information isn&amp;rsquo;t replicated online.&lt;/p>
&lt;p>What I wanted to do here is to pull out what I found the most important so that others can run their own effective one-to-ones without having to dedicate 90 minutes to listen to a podcast. This is a condensed view of what to do. If you want the complete explanation of why you do this I would recommend listening to the podcast itself.&lt;/p>
&lt;p>In the podcast they refer to the person who works for you as your &amp;ldquo;direct&amp;rdquo;. I don&amp;rsquo;t really like the term, but I can&amp;rsquo;t think of a better one, so I&amp;rsquo;m going to re-use it.&lt;/p>
&lt;h2 id="where-and-when">Where and when&lt;/h2>
&lt;ul>
&lt;li>Run your one-to-ones weekly. As the manager put it in your and the directs calendar. You can move it, but don&amp;rsquo;t miss it.&lt;/li>
&lt;li>No more than 30 minutes. An hour is too long.&lt;/li>
&lt;li>Run it in space where the direct feels comfortable&lt;/li>
&lt;/ul>
&lt;h2 id="what-to-discuss-agenda">What to discuss (Agenda)&lt;/h2>
&lt;ul>
&lt;li>Your directs views: 10 minutes&lt;/li>
&lt;li>Your views: 10 minutes&lt;/li>
&lt;li>The future: 10 minutes&lt;/li>
&lt;/ul>
&lt;p>Don&amp;rsquo;t rigidly stick to the agenda. If your direct wants to spend more time talking about their views then that&amp;rsquo;s their prerogative. This is their meeting.&lt;/p>
&lt;p>Your views might be about how interactions in the team are working, or not. The future is about where they are heading. Are they looking to move on? Or stay?&lt;/p>
&lt;p>An important note is that you, as a manager, should have a broad opening question. In the podcast they suggest &amp;ldquo;How&amp;rsquo;s it going?&amp;rdquo;.&lt;/p>
&lt;h2 id="review">Review&lt;/h2>
&lt;p>I disagree somewhat with this agenda. It seems to lean towards on the manager&amp;rsquo;s view. The important thing is that your directs have a voice and you understand their wants and needs. If they want to talk for the entire time that&amp;rsquo;s up to them. It&amp;rsquo;s a two way street anyway and an opportunity for coaching.&lt;/p>
&lt;p>I personally would avoid the Joey Tribbiani comparison and possibly ask &amp;ldquo;How are things?&amp;rdquo; but has roughly the same meaning.&lt;/p>
&lt;p>The other thing to note is that as meetings go, one-to-ones are deceptively straight-forward. They work better when you don&amp;rsquo;t over think them. Other than scheduling you almost let your directs run them themselves.&lt;/p>
&lt;p>Other than that I was quite happy to get this insight.&lt;/p></description></item><item><title>Engineers Care Less About The OS</title><link>https://matt.copperwaite.net/blog/engineers-care-less-about-the-os/</link><pubDate>Thu, 08 Apr 2021 18:10:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/blog/engineers-care-less-about-the-os/</guid><description>&lt;p>&lt;a href="https://www.lastweekinaws.com/blog/">Last Week in AWS&lt;/a> is another one of my favourite blogs, but &lt;a href="https://www.lastweekinaws.com/blog/nobody-cares-about-the-operating-system-anymore/">this weeks one titled &amp;lsquo;Nobody Cares About the Operating System Anymore&amp;rsquo;&lt;/a> definitely got me thinking.&lt;/p>
&lt;p>If you&amp;rsquo;ve never read Last Week in AWS the thing to note is that scores really high on the snark factor, and like most blogs it tends towards the hyperbolic titles to attract readers and discussion, after all, it&amp;rsquo;s not as pithy, and not going to attract as much attention if the title is &amp;lsquo;In the cloud, Engineers don&amp;rsquo;t really care about the Operating System anymore&amp;rsquo;. Which is probably why my blog is much less snarky, and much more boring.&lt;/p>
&lt;p>However, in this case I think the premise is wrong. It&amp;rsquo;s not that even engineers no-longer really care about what Operating System you choose but that Cloud based Virtual Machines (as a catch all for EC2s, Azure VMs and whatever GCP calls compute) is no-longer used and for me is actually an indicator of &amp;lsquo;infrastructure smell&amp;rsquo;. I.e.: that something is old, or unpatched, or not cloud native. For me, if I have to use a VM in &lt;a href="https://en.wikipedia.org/wiki/Hyperscale_computing">hyperscale cloud&lt;/a>, something has gone wrong somewhere.&lt;/p>
&lt;p>There are instances where you might use VMs, or more commonly called VPS, and dedicated boxes, which you find on more commodity providers such as DigitalOcean, Scaleway, or RedStation (to broach the tip of the iceberg), but when you have SaaS, FaaS, and Serverless Docker environments such as Fargate and Kubernetes, I really struggle to see the value in using dedicated, always on, compute. If anything its technical debt that you need to monitor, maintain, patch and scale.&lt;/p>
&lt;p>As a side note, yes you &lt;a href="https://chemidy.medium.com/create-the-smallest-and-secured-golang-docker-image-based-on-scratch-4752223b7324">sometimes&lt;/a> have to choose a base Linux distribution for Docker images, but this is essentially a game of pick your preferred package manager, and then it&amp;rsquo;s done and you never ever change that &lt;code>FROM&lt;/code> value except to update the version number.&lt;/p>
&lt;p>I can see why Corey would interpret that as nobody cares about the Operating System, but the broader picture to me is not that the Operating System doesn&amp;rsquo;t matter, it&amp;rsquo;s that we&amp;rsquo;re at a point in technology in hyperscale cloud that the technologies allow us to abstract away VMs, making the variety of choice of Operating System is less relevant, but it&amp;rsquo;s the cloud providers abstraction layers that enable that, rather than engineers not caring.&lt;/p></description></item><item><title>Chaos Engineering Your Team</title><link>https://matt.copperwaite.net/blog/chaos-engineering-your-team/</link><pubDate>Wed, 09 Dec 2020 18:10:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/blog/chaos-engineering-your-team/</guid><description>&lt;p>Mountain Goat Software runs possibly one of my favourite blogs at the moment. This recent post &lt;a href="https://www.mountaingoatsoftware.com/blog/should-your-team-adopt-no-meeting-weeks">&amp;ldquo;Should Your Team Adopt No-Meeting Weeks&amp;rdquo; really resonated with me&lt;/a>.&lt;/p>
&lt;!--alex ignore of-course-->
&lt;p>I read an article while back, but of course I cannot find now, about how you might want to consider applying &lt;a href="https://en.wikipedia.org/wiki/Chaos_engineering">Chaos Engineering&lt;/a>, not only to your technology, but also your people. A random person gets selected maybe once a week, to take the day off. Simulating a sick-leave like situation.&lt;/p>
&lt;p>I&amp;rsquo;m a huge proponent of the idea that no single person should be critical to your business, and in fact they become a massive risk to your business that is only realised once they leave. It also creates an uncollaborative working environment because you will have a lot of different pressures from different people on one person. This is covered a lot in &lt;a href="https://www.amazon.co.uk/Phoenix-Project-DevOps-Helping-Business-ebook/dp/B00AZRBLHO">The Phoenix Project&lt;/a>.&lt;/p>
&lt;p>Using the principles behind Chaos Engineering you can build in expectations in to your team that you should be able to survive the loss of a person.&lt;/p>
&lt;p>What I like with the experiment mentioned in the post, taking a random person out of meetings, was that this it is similar to Chaos Engineering your team, but at a smaller scale. In the situation where the person, who is critical to your meeting, gets unceremoniously booted out of said meeting, you have identified a process that doesn&amp;rsquo;t account for the loss of one person.&lt;/p>
&lt;p>The other issue is that if people learn they&amp;rsquo;re not necessary for a meeting they stop coming, which I assume is the intention. However now, you start kicking out important people from the meeting, such as the executive authoriser who was there specifically for that meeting.&lt;/p>
&lt;p>In the post these issues was explained as the experiment failing. I would look at it from the other direction, it&amp;rsquo;s a failing of the processes to have a dependency in a single person.&lt;/p>
&lt;p>As CGP Grey often says, &lt;a href="https://youtu.be/boezS4C_MFc">one is none&lt;/a>.&lt;/p>
&lt;p>Now don&amp;rsquo;t get me wrong, I&amp;rsquo;m not saying you need two (or more) executives in the meeting. I&amp;rsquo;m taking the broader picture. Does everyone really need to be in the same room at the same time? In my experience I would say 90% of the time the answer is no.&lt;/p>
&lt;p>Instead the major discussions should happen before the meeting, on your preferred collaboration tool. Any reading material can be distributed before hand and consumed at your leisure. If someone has a vested interest, such as an executive authoriser, they can raise any concerns before anyone steps in the room.&lt;/p>
&lt;p>The meeting becomes a formality to say &amp;ldquo;a decision needs to be made by this date and time&amp;rdquo;. It&amp;rsquo;s more like that cliche moment in weddings in movies where the vicar says &amp;ldquo;Speak now or forever hold your peace&amp;rdquo;. The meeting should be 5 minutes tops.&lt;/p>
&lt;p>The only other time people might want to meet at the same time is if something was being presented, such as a town hall or a sprint review. In those situations you should ensure that those meetings are recorded and published so that others can view and ask questions later if they were interested, but weren&amp;rsquo;t able to attend.&lt;/p>
&lt;p>This leaves everyone free to work on what&amp;rsquo;s important, when it&amp;rsquo;s important. Not spending their entire day in meetings being presented material they could have accessed at any time. Or using time less efficiently because they&amp;rsquo;re winding up to a meeting.&lt;/p>
&lt;p>But, as the original post admits, this may only work in a Google-eque business process utopia.&lt;/p></description></item><item><title>Common Sense as Bad Practice</title><link>https://matt.copperwaite.net/blog/common-sense-as-bad-practice/</link><pubDate>Wed, 25 Nov 2020 13:35:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/blog/common-sense-as-bad-practice/</guid><description>&lt;p>It came to me in conversation recently as to how toxic &amp;ldquo;Common Sense&amp;rdquo; is.&lt;/p>
&lt;p>Common Sense says &amp;ldquo;well, everyone uses X, so we should use X&amp;rdquo; or &amp;ldquo;Everyone should know this.&amp;rdquo;&lt;/p>
&lt;p>But those are fallacies and assumptions that aren&amp;rsquo;t tested or rooted in evidence.&lt;/p>
&lt;p>Usually Common Sense comes from asking your mates or colleagues, or assuming they think the same as you. However, by doing that you inherit bias in those assumptions. You make decisions that don&amp;rsquo;t hold true, and at best you are likely going to make poor decisions, and at worst create an exclusionary environment &amp;ndash; locking out people who you will want to include.&lt;/p>
&lt;p>If you believe it is Common Sense, prove it is Common Sense. Test it out. Trial it, and properly. Don&amp;rsquo;t be part of the problem.&lt;/p>
&lt;p>Also, challenge &amp;ldquo;Common Sense&amp;rdquo; when it is used.&lt;/p>
&lt;blockquote>
&lt;p>Why is it common sense?&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Who else thinks they know that as the answer?&lt;/p>
&lt;/blockquote>
&lt;p>You should end up with a better solution that is more open and equitable than your assumptions.&lt;/p></description></item><item><title>Your Lack of Planning is Not My Emergency</title><link>https://matt.copperwaite.net/blog/your-lack-of-planning-is-not-my-emegency/</link><pubDate>Sat, 21 Nov 2020 18:10:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/blog/your-lack-of-planning-is-not-my-emegency/</guid><description>&lt;!--alex ignore he-she-->
&lt;p>Recently a colleague shared a rule he uses when dealing with urgent requests:&lt;/p>
&lt;blockquote>
&lt;p>Your lack of planning is not my emergency&lt;/p>
&lt;/blockquote>
&lt;p>My gut instinct was to disagree with it, but I couldn&amp;rsquo;t articulate it properly at the time. Now I see how it&amp;rsquo;s a regressive solution, which always makes me think there has to be a better way, and I wanted to explain my reasoning.&lt;/p>
&lt;p>The history of it comes from working in IT where often capabilities need to be updated in a hurry, but the task has a dependency on another team, your team, who does not own that change. Your team now has a bunch of pressure exerted on it because another team encountered something that they hadn&amp;rsquo;t planned for.&lt;/p>
&lt;p>The rule is a way to quickly diffuse any expectation that because another team made a mistake, that your team is responsible for fixing it. This is because these events are of toxic in nature causing extra pressure to your own deliveries.You could also reasonably assume if your team helped out, the team who owned the event won&amp;rsquo;t learn anything and will know to go direct to you in future. A single urgent request in isolation is fine, but happening regularly can be crippling to a team.&lt;/p>
&lt;p>Although if this kind of task ends up requiring an urgent response from your team, to dismiss it outright you will be making assumptions. The following is a breakdown of those assumptions.&lt;/p>
&lt;h2 id="lack-of-planning">Lack of Planning&lt;/h2>
&lt;p>How often in IT are rapid changes caused by a lack of planning? I&amp;rsquo;m betting in most cases the source of the tasks are incidents, or security patches. If you dismiss the request, you will be seen as unwilling to help out at a time of need, and as someone who may be unwilling to participate in similar future requests.&lt;/p>
&lt;p>I would expect this also means you reduce your chances of being consulted in future, or those who are making changes don&amp;rsquo;t know to inform you of them because you are not considered on the normal path to release.&lt;/p>
&lt;h2 id="emergency-exit">Emergency Exit&lt;/h2>
&lt;p>The other assumption to check is, how much of an emergency is it? Most of the project managers I&amp;rsquo;ve worked with would often say &amp;ldquo;Can you do this by tomorrow?&amp;rdquo; and when you trace back to the engineering team they&amp;rsquo;re happy with it being the next day, or May, or whenever. You may have decided not to participate based on faulty data.&lt;/p>
&lt;p>Often the delivery date has been made up based on guess-work and have no meaning. I always like to check the deadlines. They rarely hold true.&lt;/p>
&lt;h2 id="the-user-factor">The User Factor&lt;/h2>
&lt;p>Another consideration is that users are often the cause of these rush jobs. Set aside that telling them &amp;lsquo;no&amp;rsquo; is a path to shadow IT, but perhaps your process aren&amp;rsquo;t slow enough for the demands for the business. If you have users who need software installed today and your SLA is 5 days, then maybe your SLAs are at fault.&lt;/p>
&lt;h2 id="happy-to-help">Happy to Help&lt;/h2>
&lt;p>You should always be willing to improve the operational effectiveness of your business. To do that you have to participate. That is the cost of being an effective team. Perhaps a single team is often the source of the problems, so where are their problems stemming from? Are they performing an incident post-mortem? Or learning any lessons? Is there something you can do with them to prevent their issues re-arising? Perhaps this is the true problem.&lt;/p>
&lt;p>Finally, if you haven&amp;rsquo;t planned extra capacity in to your work, then have you actually planned your own work properly?&lt;/p></description></item><item><title>Assessing Security Practices of 3rd Party products</title><link>https://matt.copperwaite.net/blog/assessing-security-practices-of-3rd-party-projects/</link><pubDate>Fri, 20 Nov 2020 18:10:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/blog/assessing-security-practices-of-3rd-party-projects/</guid><description>&lt;p>In recent months I&amp;rsquo;ve been involved in discussions about whether remote working tools are &amp;ldquo;secure&amp;rdquo; or not. The answer to any blunt question like that is, as always, &amp;ldquo;it depends&amp;rdquo;, but this is as helpful as getting financial advice from YouTube adverts.&lt;/p>
&lt;p>It struck me that a lot of people interested in IT security often judge tools based upon how many vulnerabilities there are in a product. But lets be accurate here, they are judging it on how many security vulnerabilities are reported, or visible.&lt;/p>
&lt;!--alex ignore white-->
&lt;p>Once the pandemic forced us all to work from home, &lt;a href="https://www.bbc.co.uk/news/business-52115434">Zoom seemed to be the target for every &amp;ldquo;white hat&amp;rdquo; hacker consultancy&lt;/a> &lt;em>generously&lt;/em> giving their time to declare the 0 days they found to news websites, with nothing more in return than their company name to be placed along side the &lt;del>advert&lt;/del> article.&lt;/p>
&lt;p>These articles seemingly leading to several instances of &amp;ldquo;Enterprise&amp;rdquo; security teams declaring Zoom as insecure and made attempts to block its usage in their environments.&lt;/p>
&lt;p>But is Zoom unsecure? And does blocking it improve things?&lt;/p>
&lt;p>If you block Zoom, what will people use instead? Google Hangout? Skype? Chime? WebEx? Some random tool they found on the internet? Is blocking Zoom making things more or less secure?&lt;/p>
&lt;p>Zoom got the attention because its user base and visibility increased massively during the pandemic. Admittedly it did have some low hanging fruit, but was it more or less of a threat to a business than your employees using something like &lt;a href="https://en.wikipedia.org/wiki/Omegle">Omegle&lt;/a> for work?&lt;/p>
&lt;p>If we used the same metrics in which we judge Zoom and apply it to Windows or Linux those security teams would block almost all operating systems out there except maybe OpenBSD and BeOS.&lt;/p>
&lt;h2 id="it-security-shouldnt-be-reactionary">IT security shouldn&amp;rsquo;t be reactionary&lt;/h2>
&lt;p>IT security needs to be evidence lead. Would you say now that Zoom, after 6 months of global usage it is not secure? Other than the occasional &lt;a href="https://twitter.com/mvanhulten/status/1329885925862760450">person posting their Zoom codes&lt;/a>, which is the Video Conferencing equivalent of calling your S3 bucket &lt;code>big-bank-data&lt;/code>.&lt;/p>
&lt;p>So can how can we be less reactionary in future?&lt;/p>
&lt;p>One thing is to &lt;a href="https://www.theregister.com/2020/04/03/zoom_security_improvements/">recognise that Zoom fixed a lot&lt;/a>, if not all, the issues that the security researchers were making a fuss over. Usually within days or weeks.&lt;/p>
&lt;p>Where-as shouldn&amp;rsquo;t we &lt;a href="https://www.zdnet.com/article/google-to-github-times-up-this-unfixed-high-severity-security-bug-affects-developers/">trust GitHub less&lt;/a> for having a long standing issue it&amp;rsquo;s been unable or unwilling to fix?&lt;/p>
&lt;p>What I&amp;rsquo;m proposing is instead of making decisions based upon what we read in the tech news this week, we measure good security practice from 3rd parties on how quickly and responsibly vulnerabilities in their products are announced and fixed, and be pragmatic about what your users need and expect from their IT.&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Matt Copperwaite</title><link>https://matt.copperwaite.net/</link><description>Recent content on Matt Copperwaite</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><managingEditor>matt@copperwaite.net (Matt Copperwaite)</managingEditor><webMaster>matt@copperwaite.net (Matt Copperwaite)</webMaster><copyright>CC BY-SA 4.0</copyright><atom:link href="https://matt.copperwaite.net/rss.xml" rel="self" type="application/rss+xml"/><item><title>Your Lack of Planning is Not My Emergency</title><link>https://matt.copperwaite.net/blog/your-lack-of-planning-is-not-my-emegency/</link><pubDate>Tue, 27 Jul 2021 18:10:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/blog/your-lack-of-planning-is-not-my-emegency/</guid><description>&lt;!--alex ignore he-she-->
&lt;p>Recently a colleague shared a rule he uses when dealing with urgent requests:&lt;/p>
&lt;blockquote>
&lt;p>Your lack of planning is not my emergency&lt;/p>
&lt;/blockquote>
&lt;p>My gut instinct was to disagree with it, but I couldn&amp;rsquo;t articulate it properly at the time. Now I see how it&amp;rsquo;s a regressive solution, which always makes me think there has to be a better way, and I wanted to explain my reasoning.&lt;/p>
&lt;p>The history of it comes from working in IT where often capabilities need to be updated in a hurry, but the task has a dependency on another team, your team, who does not own that change. Your team now has a bunch of pressure exerted on it because another team encountered something that they hadn&amp;rsquo;t planned for.&lt;/p>
&lt;p>The rule is a way to quickly diffuse any expectation that because another team made a mistake, that your team is responsible for fixing it. This is because these events are of toxic in nature causing extra pressure to your own deliveries.You could also reasonably assume if your team helped out, the team who owned the event won&amp;rsquo;t learn anything and will know to go direct to you in future. A single urgent request in isolation is fine, but happening regularly can be crippling to a team.&lt;/p>
&lt;p>Although if this kind of task ends up requiring an urgent response from your team, to dismiss it outright you will be making assumptions. The following is a breakdown of those assumptions.&lt;/p>
&lt;h2 id="lack-of-planning">Lack of Planning&lt;/h2>
&lt;p>How often in IT are rapid changes caused by a lack of planning? I&amp;rsquo;m betting in most cases the source of the tasks are incidents, or security patches. If you dismiss the request, you will be seen as unwilling to help out at a time of need, and as someone who may be unwilling to participate in similar future requests.&lt;/p>
&lt;p>I would expect this also means you reduce your chances of being consulted in future, or those who are making changes don&amp;rsquo;t know to inform you of them because you are not considered on the normal path to release.&lt;/p>
&lt;h2 id="emergency-exit">Emergency Exit&lt;/h2>
&lt;p>The other assumption to check is, how much of an emergency is it? Most of the project managers I&amp;rsquo;ve worked with would often say &amp;ldquo;Can you do this by tomorrow?&amp;rdquo; and when you trace back to the engineering team they&amp;rsquo;re happy with it being the next day, or May, or whenever. You may have decided not to participate based on faulty data.&lt;/p>
&lt;p>Often the delivery date has been made up based on guess-work and have no meaning. I always like to check the deadlines. They rarely hold true.&lt;/p>
&lt;h2 id="the-user-factor">The User Factor&lt;/h2>
&lt;p>Another consideration is that users are often the cause of these rush jobs. Set aside that telling them &amp;lsquo;no&amp;rsquo; is a path to shadow IT, but perhaps your process aren&amp;rsquo;t slow enough for the demands for the business. If you have users who need software installed today and your SLA is 5 days, then maybe your SLAs are at fault.&lt;/p>
&lt;h2 id="happy-to-help">Happy to Help&lt;/h2>
&lt;p>You should always be willing to improve the operational effectiveness of your business. To do that you have to participate. That is the cost of being an effective team. Perhaps a single team is often the source of the problems, so where are their problems stemming from? Are they performing an incident post-mortem? Or learning any lessons? Is there something you can do with them to prevent their issues re-arising? Perhaps this is the true problem.&lt;/p>
&lt;p>Finally, if you haven&amp;rsquo;t planned extra capacity in to your work, then have you actually planned your own work properly?&lt;/p></description></item><item><title>Running Effective One-to-Ones</title><link>https://matt.copperwaite.net/blog/running-good-one-to-ones/</link><pubDate>Mon, 14 Jun 2021 18:10:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/blog/running-good-one-to-ones/</guid><description>&lt;p>I&amp;rsquo;ve run one-to-ones for a couple years now I realised I didn&amp;rsquo;t have a good plan for how to run them effectively, and weirdly there didn&amp;rsquo;t seem to be a lot of discussion written up about them that I could find online.&lt;/p>
&lt;p>I spoke with some colleagues who pointed to the &lt;a href="https://www.manager-tools.com/manager-tools-basics">Manager Tools Basics podcast&lt;/a> which has a set of episodes totalling around 90 minutes on the subject at hand. They are however seemingly recorded in 2005 which makes them over 15 years old. This lines up with the banner at the of the webpage. While this does seem old and despite pandemics and changes in technology it seems to hold up for the most part. The issue though is that for one, they are very verbose and second, the information isn&amp;rsquo;t replicated online.&lt;/p>
&lt;p>What I wanted to do here is to pull out what I found the most important so that others can run their own effective one-to-ones without having to dedicate 90 minutes to listen to a podcast. This is a condensed view of what to do. If you want the complete explanation of why you do this I would recommend listening to the podcast itself.&lt;/p>
&lt;p>In the podcast they refer to the person who works for you as your &amp;ldquo;direct&amp;rdquo;. I don&amp;rsquo;t really like the term, but I can&amp;rsquo;t think of a better one, so I&amp;rsquo;m going to re-use it.&lt;/p>
&lt;h2 id="where-and-when">Where and when&lt;/h2>
&lt;ul>
&lt;li>Run your one-to-ones weekly. As the manager put it in your and the directs calendar. You can move it, but don&amp;rsquo;t miss it.&lt;/li>
&lt;li>No more than 30 minutes. An hour is too long.&lt;/li>
&lt;li>Run it in space where the direct feels comfortable&lt;/li>
&lt;/ul>
&lt;h2 id="what-to-discuss-agenda">What to discuss (Agenda)&lt;/h2>
&lt;ul>
&lt;li>Your directs views: 10 minutes&lt;/li>
&lt;li>Your views: 10 minutes&lt;/li>
&lt;li>The future: 10 minutes&lt;/li>
&lt;/ul>
&lt;p>Don&amp;rsquo;t rigidly stick to the agenda. If your direct wants to spend more time talking about their views then that&amp;rsquo;s their prerogative. This is their meeting.&lt;/p>
&lt;p>Your views might be about how interactions in the team are working, or not. The future is about where they are heading. Are they looking to move on? Or stay?&lt;/p>
&lt;p>An important note is that you, as a manager, should have a broad opening question. In the podcast they suggest &amp;ldquo;How&amp;rsquo;s it going?&amp;rdquo;.&lt;/p>
&lt;h2 id="review">Review&lt;/h2>
&lt;p>I disagree somewhat with this agenda. It seems to lean towards on the manager&amp;rsquo;s view. The important thing is that your directs have a voice and you understand their wants and needs. If they want to talk for the entire time that&amp;rsquo;s up to them. It&amp;rsquo;s a two way street anyway and an opportunity for coaching.&lt;/p>
&lt;p>I personally would avoid the Joey Tribbiani comparison and possibly ask &amp;ldquo;How are things?&amp;rdquo; but has roughly the same meaning.&lt;/p>
&lt;p>The other thing to note is that as meetings go, one-to-ones are deceptively straight-forward. They work better when you don&amp;rsquo;t over think them. Other than scheduling you almost let your directs run them themselves.&lt;/p>
&lt;p>Other than that I was quite happy to get this insight.&lt;/p></description></item><item><title>Scaleway Serverless Container Deploy GitHub Action</title><link>https://matt.copperwaite.net/showcase/scaleway-serverless-action/</link><pubDate>Thu, 08 Apr 2021 18:50:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/showcase/scaleway-serverless-action/</guid><description>&lt;p>&lt;a href="https://github.com/yamatt/scaleway-serverless-container-deploy-action">This project&lt;/a> was, after a long play with both GitHub Actions and Scaleways Serverless beta, my first foray in to improving my deployment workflow.&lt;/p>
&lt;p>Scaleways Serverless public beta is a new service that that lets you run both AWS Lambda like FaaS and Docker images in an ephemeral way. It is also free while in public beta, which, as you might expect, there are issues because it is in beta. I will not go in to in detail here.&lt;/p>
&lt;p>The documentation hasn&amp;rsquo;t been brilliant, neither is GitHub Actions, but I did get to a point where I had a really good self deployment workflow when pushing changes to GitHub. However, despite successfully using GitHub Actions since their public beta, I had never created a GitHub Action before. So I decided to combine that, and this is what I ended up with.&lt;/p>
&lt;p>It doesn&amp;rsquo;t work on its own or isolation. You need to import your images in to Scaleway Container Registry to do that, and there are plenty of good and existing GitHub Actions that can already do that.&lt;/p>
&lt;p>Without much effort I wrapped the API using cURL (and jq for testing) that makes deployment a one step process, and published it to the marketplace for others to use, then promoting it in the Scaleway Slack to get feedback. I also used it in my original test project and it works beautifully.&lt;/p>
&lt;p>I licenced this under MIT, which is unusual for me. I wasn&amp;rsquo;t sure if I licenced it under AGPLv3 how much would that mess up the rest of the action, and also limit adoption, which for me was the most important thing.&lt;/p></description></item><item><title>Engineers Care Less About The OS</title><link>https://matt.copperwaite.net/blog/engineers-care-less-about-the-os/</link><pubDate>Thu, 08 Apr 2021 18:10:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/blog/engineers-care-less-about-the-os/</guid><description>&lt;p>&lt;a href="https://www.lastweekinaws.com/blog/">Last Week in AWS&lt;/a> is another one of my favourite blogs, but &lt;a href="https://www.lastweekinaws.com/blog/nobody-cares-about-the-operating-system-anymore/">this weeks one titled &amp;lsquo;Nobody Cares About the Operating System Anymore&amp;rsquo;&lt;/a> definitely got me thinking.&lt;/p>
&lt;p>If you&amp;rsquo;ve never read Last Week in AWS the thing to note is that scores really high on the snark factor, and like most blogs it tends towards the hyperbolic titles to attract readers and discussion, after all, it&amp;rsquo;s not as pithy, and not going to attract as much attention if the title is &amp;lsquo;In the cloud, Engineers don&amp;rsquo;t really care about the Operating System anymore&amp;rsquo;. Which is probably why my blog is much less snarky, and much more boring.&lt;/p>
&lt;p>However, in this case I think the premise is wrong. It&amp;rsquo;s not that even engineers no-longer really care about what Operating System you choose but that Cloud based Virtual Machines (as a catch all for EC2s, Azure VMs and whatever GCP calls compute) is no-longer used and for me is actually an indicator of &amp;lsquo;infrastructure smell&amp;rsquo;. I.e.: that something is old, or unpatched, or not cloud native. For me, if I have to use a VM in &lt;a href="https://en.wikipedia.org/wiki/Hyperscale_computing">hyperscale cloud&lt;/a>, something has gone wrong somewhere.&lt;/p>
&lt;p>There are instances where you might use VMs, or more commonly called VPS, and dedicated boxes, which you find on more commodity providers such as DigitalOcean, Scaleway, or RedStation (to broach the tip of the iceberg), but when you have SaaS, FaaS, and Serverless Docker environments such as Fargate and Kubernetes, I really struggle to see the value in using dedicated, always on, compute. If anything its technical debt that you need to monitor, maintain, patch and scale.&lt;/p>
&lt;p>As a side note, yes you &lt;a href="https://chemidy.medium.com/create-the-smallest-and-secured-golang-docker-image-based-on-scratch-4752223b7324">sometimes&lt;/a> have to choose a base Linux distribution for Docker images, but this is essentially a game of pick your preferred package manager, and then it&amp;rsquo;s done and you never ever change that &lt;code>FROM&lt;/code> value except to update the version number.&lt;/p>
&lt;p>I can see why Corey would interpret that as nobody cares about the Operating System, but the broader picture to me is not that the Operating System doesn&amp;rsquo;t matter, it&amp;rsquo;s that we&amp;rsquo;re at a point in technology in hyperscale cloud that the technologies allow us to abstract away VMs, making the variety of choice of Operating System is less relevant, but it&amp;rsquo;s the cloud providers abstraction layers that enable that, rather than engineers not caring.&lt;/p></description></item><item><title>Flask Framework</title><link>https://matt.copperwaite.net/showcase/flask-framework/</link><pubDate>Thu, 11 Mar 2021 18:30:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/showcase/flask-framework/</guid><description>&lt;p>Back in 2015 I co-authored a book on &lt;a href="https://www.amazon.co.uk/Learning-Flask-Framework-data-driven-applications/dp/1783983361">Learning the Flask Framework&lt;/a> on the subject of creating a website using the utterly brilliant &lt;a href="https://palletsprojects.com/p/flask/">Flask&lt;/a> framework in Python.&lt;/p>
&lt;p>In the book I discuss the process of building a blog in Flask. Starting with the how to get started and moving on to forms and working with databases. As with any technology book its age it could be considered dated now, the world has moved on in those years and it&amp;rsquo;s not I would recommend following now, but if you want to get familiar with Flask there are few books as comprehensive as this one.&lt;/p>
&lt;p>It was an experiment to see what the authoring process was like and it was far more difficult and more intensive than I had expected. I was even working on it the day before I got married. It&amp;rsquo;s not something I care to repeat.&lt;/p>
&lt;p>I much prefer open and public documentation. But I am pleased with and proud of the book.&lt;/p></description></item><item><title>This Blog</title><link>https://matt.copperwaite.net/showcase/this-blog/</link><pubDate>Wed, 10 Mar 2021 18:50:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/showcase/this-blog/</guid><description>&lt;p>&lt;a href="https://matt.copperwaite.net">This blog&lt;/a> is my attempt at consolidating my IT security knowledge using Agile methodology.&lt;/p>
&lt;p>I had a couple of requirements:&lt;/p>
&lt;ul>
&lt;li>Cost sensitive - When it comes to personal projects I try to keep costs as low as possible&lt;/li>
&lt;li>No Analytics - I appreciate it if people read my blog, but I&amp;rsquo;m mainly writing for myself. I don&amp;rsquo;t care in detail who reads it or how they interact with it.&lt;/li>
&lt;li>Minimal bandwidth costs - I don&amp;rsquo;t want this blog to go down if I have the fortunate problem of becoming popular&lt;/li>
&lt;li>Static site - I knew I wanted to play with a static site generator&lt;/li>
&lt;li>Use of Content linting tools - I wanted to ensure the quality of the content of my blog by using a pipeline that measured content quality.&lt;/li>
&lt;li>Create content from mobile - So if I have a few spare minutes I can throw something together&lt;/li>
&lt;/ul>
&lt;p>I really enjoy this sort of thinking. It initially left me one option a public S3 bucket, however because the S3 costs are not zero I spent time thinking about it more and realised the tool that filled most of these options was GitHub Pages.&lt;/p>
&lt;p>Now GitHub Pages does have its own static page generator, but after a bit of research I settled on Hugo as being the most widely used as well as being the best documented.&lt;/p>
&lt;p>One thing that didn&amp;rsquo;t work out was being able to edit content from a phone. It turns out all the GitHub Android apps are pretty terrible and out-dated and editing files from them isn&amp;rsquo;t really possible. Ah well. Can&amp;rsquo;t win them all.&lt;/p>
&lt;p>That is not to say my journey in to Hugo was fun, things like using submodules in git makes me squirm, but I&amp;rsquo;m super happy with the results. I&amp;rsquo;ve also set it up in a way which means if I wanted to set up other blogs it would be very little effort to get it going.&lt;/p>
&lt;h2 id="content-quality">Content Quality&lt;/h2>
&lt;p>I used to have (or more accurately abandoned) a Twitter account after seeing the Twitter backlash and decided I didn&amp;rsquo;t feel comfortable with my own writing. One of the things that concerned me is my ability to explain complex problems in a concise way. I saw a lot of people revert to blogs when Twitter didn&amp;rsquo;t fill the gap, so I figured a blog was the best answer. I also wanted to minimize my own biases in my writing and wanted to be as inclusive as possible with the aim to minimise backlash. To me the only way of doing that was to bring in content quality tooling in much the same way you would bring in linters and tests to bring in code quality, seemed the best way of doing that.&lt;/p>
&lt;p>After some discussions with colleagues I gathered some tooling that I wanted to include in a CI/CD pipeline. I don&amp;rsquo;t think this is the extent of tools that could be included but enough tooling to make me comfortable with writing a blog.&lt;/p>
&lt;h3 id="alexjs">AlexJS&lt;/h3>
&lt;p>One of the tools I chose to check this quality was &lt;a href="https://alexjs.com/">AlexJS&lt;/a>. I was already a little familiar with it anyway, having been referred it by a friend. AlexJS looks to improve the equality in your use of language and is super cool and it&amp;rsquo;s been fascinating how it&amp;rsquo;s been teaching me to adapt my language. I looked for similar products that I could also include, but I wasn&amp;rsquo;t very successful.&lt;/p>
&lt;h3 id="make-words-better">Make words better&lt;/h3>
&lt;p>Another things I did want to include was something like Grammarly to improve the understanding of the content, however as it was not open source and the API didn&amp;rsquo;t seem to meet what I wanted to do I discovered GrammarBot. It still didn&amp;rsquo;t integrate nicely with CI/CD pipelines, so &lt;a href="https://github.com/yamatt/python3-hemoglobin">I wrote a wrapper&lt;/a> to print human readable results.&lt;/p>
&lt;h3 id="reading-complexity-and-length">Reading complexity and length&lt;/h3>
&lt;p>The other thing I wanted to do to improve content quality was to ensure that when writing about complex topics I was not alienating anyone and that the reading length is not too long. I really struggled to find many tools here. The one I found is a Python library called &lt;a href="https://github.com/shivam5992/textstat">textstat&lt;/a>, which reads plain text files and derives lots of stats about complexity. I haven&amp;rsquo;t taken the time to study in detail what the numbers mean, but I figured if the numbers were at least reasonably consistent I&amp;rsquo;m probably doing OK.&lt;/p>
&lt;p>However, since textstat is a library I needed to &lt;a href="https://github.com/yamatt/python3-textstat-cli">write a wrapper&lt;/a> that allowed it to be included in a CI/CD pipeline and be human readable.&lt;/p>
&lt;p>The other thing I wanted to do was to ensure the reading length of the text was no more than 10 minutes. I use Firefox&amp;rsquo;s Reader view quite a lot and at the top it gives you an approximate reading time. My upper bound on that is 10 minutes. It&amp;rsquo;s partly a free time thing, but also I feel like if I can&amp;rsquo;t explain a problem within a reasonable time-frame I need to break it out in to separate posts that explain a specific problem in more detail.&lt;/p>
&lt;p>This reading length requirement is actually a really quick bit of maths to detect the number of words and then divide that by a variety of people&amp;rsquo;s reading speeds. It was so quick to do I actually bundled it in to &lt;a href="https://github.com/yamatt/python3-textstat-cli">textstat-cli&lt;/a>.&lt;/p>
&lt;h2 id="future">Future&lt;/h2>
&lt;h3 id="stats">Stats&lt;/h3>
&lt;p>One day, once I get enough posts together I will try to see what interesting stats I can find. Since I&amp;rsquo;m not using analytics I&amp;rsquo;ll never be able to do that end of year blog post that my favourite blog posts do that usually discuss their most popular blog posts. But perhaps for me that will be the time I review the readability and inclusiveness of my posts.&lt;/p>
&lt;h3 id="comments-on-posts">Comments on Posts&lt;/h3>
&lt;p>I did want to include comments on blog posts as a proxy for page impressions and to improve engagement. I played with using GitHub Issues as comments and as you might expect I&amp;rsquo;m &lt;a href="https://github.com/krasimir/octomments">far from alone&lt;/a> in that. However I am yet to have the time to include it.&lt;/p>
&lt;h3 id="link-validation">Link Validation&lt;/h3>
&lt;p>Another thing I&amp;rsquo;m thinking of doing is to also validate any links I use in my posts. If I link to something that page needs to exist, and be stored in the &lt;a href="https://web.archive.org/">Way Back Machine&lt;/a>. This is more difficult to achieve than I was expecting, so something for another time.&lt;/p></description></item><item><title>Chaos Engineering Your Team</title><link>https://matt.copperwaite.net/blog/chaos-engineering-your-team/</link><pubDate>Wed, 09 Dec 2020 18:10:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/blog/chaos-engineering-your-team/</guid><description>&lt;p>Mountain Goat Software runs possibly one of my favourite blogs at the moment. This recent post &lt;a href="https://www.mountaingoatsoftware.com/blog/should-your-team-adopt-no-meeting-weeks">&amp;ldquo;Should Your Team Adopt No-Meeting Weeks&amp;rdquo; really resonated with me&lt;/a>.&lt;/p>
&lt;!--alex ignore of-course-->
&lt;p>I read an article while back, but of course I cannot find now, about how you might want to consider applying &lt;a href="https://en.wikipedia.org/wiki/Chaos_engineering">Chaos Engineering&lt;/a>, not only to your technology, but also your people. A random person gets selected maybe once a week, to take the day off. Simulating a sick-leave like situation.&lt;/p>
&lt;p>I&amp;rsquo;m a huge proponent of the idea that no single person should be critical to your business, and in fact they become a massive risk to your business that is only realised once they leave. It also creates an uncollaborative working environment because you will have a lot of different pressures from different people on one person. This is covered a lot in &lt;a href="https://www.amazon.co.uk/Phoenix-Project-DevOps-Helping-Business-ebook/dp/B00AZRBLHO">The Phoenix Project&lt;/a>.&lt;/p>
&lt;p>Using the principles behind Chaos Engineering you can build in expectations in to your team that you should be able to survive the loss of a person.&lt;/p>
&lt;p>What I like with the experiment mentioned in the post, taking a random person out of meetings, was that this it is similar to Chaos Engineering your team, but at a smaller scale. In the situation where the person, who is critical to your meeting, gets unceremoniously booted out of said meeting, you have identified a process that doesn&amp;rsquo;t account for the loss of one person.&lt;/p>
&lt;p>The other issue is that if people learn they&amp;rsquo;re not necessary for a meeting they stop coming, which I assume is the intention. However now, you start kicking out important people from the meeting, such as the executive authoriser who was there specifically for that meeting.&lt;/p>
&lt;p>In the post these issues was explained as the experiment failing. I would look at it from the other direction, it&amp;rsquo;s a failing of the processes to have a dependency in a single person.&lt;/p>
&lt;p>As CGP Grey often says, &lt;a href="https://youtu.be/boezS4C_MFc">one is none&lt;/a>.&lt;/p>
&lt;p>Now don&amp;rsquo;t get me wrong, I&amp;rsquo;m not saying you need two (or more) executives in the meeting. I&amp;rsquo;m taking the broader picture. Does everyone really need to be in the same room at the same time? In my experience I would say 90% of the time the answer is no.&lt;/p>
&lt;p>Instead the major discussions should happen before the meeting, on your preferred collaboration tool. Any reading material can be distributed before hand and consumed at your leisure. If someone has a vested interest, such as an executive authoriser, they can raise any concerns before anyone steps in the room.&lt;/p>
&lt;p>The meeting becomes a formality to say &amp;ldquo;a decision needs to be made by this date and time&amp;rdquo;. It&amp;rsquo;s more like that cliche moment in weddings in movies where the vicar says &amp;ldquo;Speak now or forever hold your peace&amp;rdquo;. The meeting should be 5 minutes tops.&lt;/p>
&lt;p>The only other time people might want to meet at the same time is if something was being presented, such as a town hall or a sprint review. In those situations you should ensure that those meetings are recorded and published so that others can view and ask questions later if they were interested, but weren&amp;rsquo;t able to attend.&lt;/p>
&lt;p>This leaves everyone free to work on what&amp;rsquo;s important, when it&amp;rsquo;s important. Not spending their entire day in meetings being presented material they could have accessed at any time. Or using time less efficiently because they&amp;rsquo;re winding up to a meeting.&lt;/p>
&lt;p>But, as the original post admits, this may only work in a Google-eque business process utopia.&lt;/p></description></item><item><title>CharDiff</title><link>https://matt.copperwaite.net/showcase/chardiff/</link><pubDate>Mon, 30 Nov 2020 10:24:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/showcase/chardiff/</guid><description>&lt;p>&lt;a href="https://github.com/yamatt/python3-chardiff">CharDiff&lt;/a> is an easy-to-use tool to compare 2 strings and highlight the characters in them that are different.&lt;/p>
&lt;p>This came about for a couple reasons.&lt;/p>
&lt;p>For one I had some very long strings I was working with at the time and I was having a lot of difficulty finding where they differed. I really struggled to find any tools that would allow me to find the difference between strings at a character level.&lt;/p>
&lt;p>The other reason was I was looking for a very quick project in Python3 that I could use to do things properly. By which I mean, have tested code, have it running in a CI/CD pipeline (I wanted to play with the GitHub Actions beta I&amp;rsquo;d got myself on to) and have it publish to PyPI.&lt;/p>
&lt;p>I even already have some &lt;a href="https://github.com/yamatt/python3-chardiff/issues/2">nice feedback from some users&lt;/a>.&lt;/p>
&lt;p>I have seen subsequent posts around the web of tools like this, and there are &lt;a href="https://github.com/johannhof/difference.rs">definitely better ones out there&lt;/a>.&lt;/p>
&lt;p>But it wasn&amp;rsquo;t to be the best but to expand my knowledge. I now have a template for future projects.&lt;/p></description></item><item><title>TV Show Chart</title><link>https://matt.copperwaite.net/showcase/tv-show-chart/</link><pubDate>Sat, 28 Nov 2020 17:14:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/showcase/tv-show-chart/</guid><description>&lt;p>&lt;a href="https://yamatt.github.io/tv-show-chart/">TV Show Chart&lt;/a> allows you to visualise the popularity of TV Show episodes across seasons using IMDb data and GitHub Actions.&lt;/p>
&lt;p>There used to be a website that did this for you. It seemed to go away. So I decided to write some quick hacks to make my own. It is really bare minimum to get it working.&lt;/p>
&lt;p>It started off being nothing good or professional about the code behind the repo. I am not a front-end person at all, other than I like doing a bit of JavaScript from time to time.&lt;/p>
&lt;p>I personally prefer the IMDb popularity scores, but their API is functionally non-existent. So I wrote some Python to pull all the code together.&lt;/p>
&lt;p>Originally my plan was to store the episode data objects in maybe S3 or B2 and process the data in AWS Lambdas.&lt;/p>
&lt;p>However I could never get the Lambdas to complete in time and I was worried if the site became popular I would be paying for bandwidth.&lt;/p>
&lt;p>I then realised I might be able to store the data in GitHub, but the data as JSON was far too big. I seem to remember reading that there is a 2Gb limit on GitHub repo sizes. So I created my own proprietary format to store the data in a more succinct way.&lt;/p>
&lt;p>Recently I&amp;rsquo;ve been playing with static sites in GitHub and these work really well with GitHub Actions, commiting the code back to the repo.&lt;/p>
&lt;p>Plus I read an article about grabbing &lt;a href="https://coviddata.github.io/coviddata/">Covid data using GitHub Actions on a schedule&lt;/a>. It really made me want to revisit this work since the data hadn&amp;rsquo;t been updated in months.&lt;/p>
&lt;p>I also found that GitHub Actions are way more powerful that Lambdas so I could run the scripts in a matter of minutes, which was nice.&lt;/p>
&lt;p>There are definitely some UX improvements I would like to make so it&amp;rsquo;s possible to search for TV shows, but I need to do a bit of professionalisation first.&lt;/p></description></item><item><title>Filter Annoyances</title><link>https://matt.copperwaite.net/showcase/filter-annoyances/</link><pubDate>Fri, 27 Nov 2020 17:14:32 +0100</pubDate><author>matt@copperwaite.net (Matt Copperwaite)</author><guid>https://matt.copperwaite.net/showcase/filter-annoyances/</guid><description>&lt;p>&lt;a href="https://yamatt.github.io/filter-annoyances/">Filter Annoyances&lt;/a> is some filters for uBlock Origin that I did not find in other filter lists.&lt;/p>
&lt;p>This is my first foray in to making uBlock Origin. I was at the time, and still do, wanted to remove the cookie and GDPR pop-ups but still use the site. These filters help facilitate that.&lt;/p>
&lt;p>There are a couple of built-in ones to uBlock such as &lt;a href="https://github.com/easylist/easylist">easylist cookie&lt;/a> and uBlock Annoyances, but these looked difficult to contribute to.&lt;/p>
&lt;p>I did use &lt;a href="https://addons.mozilla.org/en-GB/firefox/addon/i-dont-care-about-cookies/">&lt;em>I don&amp;rsquo;t care about cookies&lt;/em>&lt;/a> for a little while, which worked fine, but I couldn&amp;rsquo;t find it&amp;rsquo;s source code anywhere, despite it saying it&amp;rsquo;s open source. So I thought to be safe I would stop using it.&lt;/p>
&lt;p>I&amp;rsquo;m kind of curious about ways you can test and validate uBlock Origin filters. It seems kind of difficult.&lt;/p>
&lt;p>I also found that the &lt;a href="https://github.com/gorhill/uBlock/wiki/Static-filter-syntax">filter syntax used in uBlock Origin comes from Adblock Plus&lt;/a>, and they can be very imprecise. But the uBlock Origin element picker tool is amazing. Some of the time I use it then copy the generated rule in to this repo.&lt;/p>
&lt;p>I chose (rather unusually for me) the CC0 license for these filters because I wanted to put them as much in to the public domain as possible, and because they are not really programmatic scripts.&lt;/p>
&lt;p>The distractions list is purely for things that take me away being productive on sites I use day-to-day. Kind of dark patterns really that keep you on their site.&lt;/p>
&lt;p>The aggressive filter I&amp;rsquo;ve moved away from because it was too difficult to maintain and I kept having to switch off uBlock to see if the page worked, which then meant I saw ads.&lt;/p></description></item></channel></rss>